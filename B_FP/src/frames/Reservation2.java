/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import javax.swing.JComboBox;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;



public class Reservation2 extends javax.swing.JFrame {

    /**
     * Creates new form Reservation2
     */
    public Reservation2() {
        initComponents();
        ShowI();
    }

    Connection Con = null;
    Statement St = null, St1 = null;
    ResultSet Rs = null, Rs1 = null;

    public void Connect_DB() {
        try {
            Con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gst_act", "root", "");
        } catch (SQLException Ex) {
            JOptionPane.showMessageDialog(null, "Impossible de se connecter à la BASE DE DONNÉES.");
        }
    }

    private void ShowI() {
        try {
            Connect_DB();
            St = Con.createStatement();
            Rs = St.executeQuery("SELECT * FROM `réservation`");
            jTable1.setModel(DbUtils.resultSetToTableModel(Rs));

            // Populate nom_org JComboBox with data from organisateur table
            St1 = Con.createStatement();
            Rs1 = St1.executeQuery("SELECT Nom_os FROM organisateur");
            nom_os.removeAllItems();
            while (Rs1.next()) {
                nom_os.addItem(Rs1.getString("Nom_os"));
            }

            // Enable suggestions for nom_org JComboBox
            AutoCompleteDecorator.decorate(nom_os);

            // Populate nomact JComboBox with data from activité table
            St1 = Con.createStatement();
            Rs1 = St1.executeQuery("SELECT Nom_act FROM activité");
            nomact.removeAllItems();
            while (Rs1.next()) {
                nomact.addItem(Rs1.getString("Nom_act"));
            }
            Con.close();
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Erreur de base de données");
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Format de nombre incorrect");
}

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nom_os = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        methode = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        conv = new javax.swing.JTextField();
        nbr = new javax.swing.JTextField();
        money = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jadd = new javax.swing.JButton();
        jedit = new javax.swing.JButton();
        jdelete = new javax.swing.JButton();
        dur = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        hour = new com.github.lgooddatepicker.components.TimePicker();
        date = new com.github.lgooddatepicker.components.DatePicker();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        mondate = new com.github.lgooddatepicker.components.DatePicker();
        nomact = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        Print = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        obj = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Réservation");

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/res.png"))); // NOI18N
        jLabel1.setText("Réservation");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 180, 70));

        jLabel3.setText("Nom d'organisation:");
        jLabel3.setBackground(new java.awt.Color(0, 153, 153));
        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 160, 30));

        nom_os.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nom_os.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        nom_os.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nom_osActionPerformed(evt);
            }
        });
        jPanel1.add(nom_os, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 120, 160, 30));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nom d'activité:");
        jLabel4.setBackground(new java.awt.Color(0, 153, 153));
        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 120, 130, 30));

        methode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "espèce", "virement bancaire ", "versement bancaire", "chèque", "paiement électronique" }));
        methode.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        methode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodeActionPerformed(evt);
            }
        });
        jPanel1.add(methode, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 300, 170, 30));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Numero de convention:");
        jLabel5.setBackground(new java.awt.Color(0, 153, 153));
        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 180, 30));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Huere D'activité:");
        jLabel6.setBackground(new java.awt.Color(0, 153, 153));
        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 150, 30));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Duree d'activite:");
        jLabel7.setBackground(new java.awt.Color(0, 153, 153));
        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 140, 30));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Nombre des participants:");
        jLabel8.setBackground(new java.awt.Color(0, 153, 153));
        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 180, 30));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Montant de paiement:");
        jLabel9.setBackground(new java.awt.Color(0, 153, 153));
        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 160, 30));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Date de paiement:");
        jLabel10.setBackground(new java.awt.Color(0, 153, 153));
        jLabel10.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 150, 30));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Methode de paiement:");
        jLabel11.setBackground(new java.awt.Color(0, 153, 153));
        jLabel11.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 300, 160, 30));

        conv.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        conv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convActionPerformed(evt);
            }
        });
        jPanel1.add(conv, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 140, 30));

        nbr.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jPanel1.add(nbr, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 70, 30));

        money.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jPanel1.add(money, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 100, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 1090, 190));

        jadd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/plus.png"))); // NOI18N
        jadd.setText("Ajouter");
        jadd.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddActionPerformed(evt);
            }
        });
        jPanel1.add(jadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 590, 140, 40));

        jedit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/compose.png"))); // NOI18N
        jedit.setText("Modifier");
        jedit.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jeditActionPerformed(evt);
            }
        });
        jPanel1.add(jedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 590, 140, 40));

        jdelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        jdelete.setText("Supprimer");
        jdelete.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdeleteActionPerformed(evt);
            }
        });
        jPanel1.add(jdelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 590, 140, 40));

        dur.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jPanel1.add(dur, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, 50, 30));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Date d'activité:");
        jLabel13.setBackground(new java.awt.Color(0, 153, 153));
        jLabel13.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 170, 130, 30));
        jPanel1.add(hour, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 90, 30));
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 170, 160, 30));

        jLabel15.setText("heure(s).");
        jLabel15.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, -1, -1));

        jLabel16.setText("DA.");
        jLabel16.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 310, -1, -1));
        jPanel1.add(mondate, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, 160, 30));

        nomact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nomact.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        nomact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomactActionPerformed(evt);
            }
        });
        jPanel1.add(nomact, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 120, 180, 30));

        jLabel17.setText("Paiment");
        jLabel17.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jLabel17.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 1080, -1));

        jLabel18.setText("Détails");
        jLabel18.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jLabel18.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 1070, -1));

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back.png"))); // NOI18N
        back.setText("Menu");
        back.setBackground(new java.awt.Color(0, 153, 153));
        back.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        back.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 100, 40));

        jLabel12.setText("La liste des réservations");
        jLabel12.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jLabel12.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 1080, -1));

        Print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/printer.png"))); // NOI18N
        Print.setText("Imprimer");
        Print.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });
        jPanel1.add(Print, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 590, 140, 40));

        jLabel2.setText("Objectif de réservation:");
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, 170, 30));

        obj.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        obj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objActionPerformed(evt);
            }
        });
        jPanel1.add(obj, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 220, 160, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1114, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void methodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_methodeActionPerformed

    private void nomactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomactActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
Menu2 menuu = new Menu2();
menuu.setVisible(true);
this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
try {
        // Create a new PrinterJob
        PrinterJob job = PrinterJob.getPrinterJob();

// Définir l'objet Printable
job.setPrintable(new Printable() {
    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        if (pageIndex > 0) {
            return NO_SUCH_PAGE;
        }

        // Créer un objet Graphics2D
        Graphics2D g2d = (Graphics2D) graphics;

        // Définir les paramètres de rendu pour une meilleure qualité d'impression
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        // Définir la zone imprimable dans la page
        int x = (int) pageFormat.getImageableX();
        int y = (int) pageFormat.getImageableY();
        int width = (int) pageFormat.getImageableWidth();
        int height = (int) pageFormat.getImageableHeight();

        // Dessiner votre contenu d'autorisation en utilisant les méthodes Graphics2D (par ex. drawString, drawRect, etc.)
        // Exemple :
        g2d.drawString("Autorisation de réservation d'activité", x + 100, y + 50);
        g2d.drawString("-----------------------------------------------", x + 100, y + 60);

        g2d.drawString("Numéro de convention : " + conv.getText(), x + 100, y + 100);

        g2d.drawString("Activité : " + nomact.getSelectedItem().toString(), x + 100, y + 120);
        g2d.drawString("Organisation : " + nom_os.getSelectedItem().toString(), x + 100, y + 140);
        g2d.drawString("Heure : " + hour.getText(), x + 100, y + 160);
        g2d.drawString("Durée : " + dur.getText() +"   heure(s).", x + 100, y + 180);
        g2d.drawString("Date : " + date.getText(), x + 100, y + 200);
        g2d.drawString("Nombre de participants : " + nbr.getText(), x + 100, y + 220);
        g2d.drawString("Objectif : " + obj.getText(), x + 100, y + 240);
        g2d.drawString("Montant du paiement : " + money.getText()+ "   DA.", x + 100, y + 260);
        g2d.drawString("Date du paiement : " + mondate.getText(), x + 100, y + 280);
        g2d.drawString("Méthode de paiement : " + methode.getSelectedItem().toString(), x + 100, y + 300);
        // Ajouter plus de contenu si nécessaire

        return PAGE_EXISTS;
    }
});

// Afficher la boîte de dialogue d'impression à l'utilisateur
if (job.printDialog()) {
    // Imprimer le document
    job.print();
}
} catch (PrinterException e) {
    JOptionPane.showMessageDialog(null, "Erreur lors de l'impression : " + e.getMessage());
}

    }//GEN-LAST:event_PrintActionPerformed

    private void objActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objActionPerformed

    private void nom_osActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nom_osActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nom_osActionPerformed

    private void jaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddActionPerformed
                                   
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    if (nom_os.getSelectedItem() == null || nomact.getSelectedItem() == null || conv.getText().isEmpty() || hour.getText().isEmpty() || dur.getText().isEmpty() || date.getText().isEmpty() || nbr.getText().isEmpty() || obj.getText().isEmpty() || money.getText().isEmpty() || mondate.getText().isEmpty() || methode.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(null, "Veuillez entrer vos informations!");
    } else {
        try {
            Connect_DB();

            // Check if a reservation with the same date, hour, and activity already exists
            String checkQuery = "SELECT COUNT(*) FROM réservation WHERE date_act = ? AND ((heure_act <= ? AND heure_act + dur_act > ?) OR (heure_act >= ? AND heure_act < ?)) AND id_act = (SELECT id_act FROM activité WHERE Nom_act = ?)";
            PreparedStatement checkPst = Con.prepareStatement(checkQuery);
            checkPst.setString(1, date.getDate().toString());
            
            // Get the selected start time and duration
            LocalTime selectedTime = hour.getTime();
            int selectedDuration = Integer.parseInt(dur.getText());

            // Calculate the end time
            LocalTime endTime = selectedTime.plusHours(selectedDuration);

            // Format the start time and end time as strings
            String formattedStartTime = selectedTime.format(DateTimeFormatter.ofPattern("HH:mm", Locale.FRANCE));
            String formattedEndTime = endTime.format(DateTimeFormatter.ofPattern("HH:mm", Locale.FRANCE));

            checkPst.setString(2, formattedStartTime);
            checkPst.setString(3, formattedStartTime);
            checkPst.setString(4, formattedStartTime);
            checkPst.setString(5, formattedEndTime);
            checkPst.setString(6, nomact.getSelectedItem().toString());
            ResultSet checkResult = checkPst.executeQuery();

            if (checkResult.next() && checkResult.getInt(1) > 0) {
                JOptionPane.showMessageDialog(null, "Une réservation existe déjà à cette date, heure et pour cette activité. Veuillez choisir une autre heure ou activité.");
            } else {
                // Proceed with adding the new reservation
                String insertQuery = "INSERT INTO réservation (id_os, id_act, Num_c, heure_act, dur_act , date_act, Nbr_participant, Obj_res, Mon_Pai, Date_Pai, Meth_Pai) VALUES ((SELECT id_os FROM organisateur WHERE Nom_os = ?), (SELECT id_act FROM activité WHERE Nom_act = ?), ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pst = Con.prepareStatement(insertQuery);

                pst.setString(1, nom_os.getSelectedItem().toString());
                pst.setString(2, nomact.getSelectedItem().toString());
                pst.setInt(3, Integer.parseInt(conv.getText()));
                pst.setString(4, formattedStartTime);
                pst.setInt(5, selectedDuration);
                pst.setString(6, date.getDate().toString());
                pst.setInt(7, Integer.parseInt(nbr.getText()));
                pst.setString(8, obj.getText());
                pst.setInt(9, Integer.parseInt(money.getText()));
                pst.setString(10, mondate.getDate().toString());
                pst.setString(11, methode.getSelectedItem().toString());
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Réservation ajoutée avec succès !");

                ShowI();
                nom_os.setSelectedIndex(-1);
                nomact.setSelectedIndex(-1);
                conv.setText("");
                hour.setText("");
                dur.setText("");
                date.setText("");
                nbr.setText("");
                obj.setText("");
                money.setText("");
                mondate.setText("");
                methode.setSelectedIndex(-1);
                Con.close();
            }
   } catch (HeadlessException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème d'affichage de la fenêtre.");
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Veuillez entrer des valeurs numériques valides.");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème avec la base de données.");
}

    }


          
// TODO add your handling code here:
    }//GEN-LAST:event_jaddActionPerformed

    private void convActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_convActionPerformed

    private void jeditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jeditActionPerformed
      int index = jTable1.getSelectedRow();
           if (index == -1) {
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner une réservation à modifier.");
    } else {
        try { 
            Connect_DB();
            
            
            // Check if a reservation with the same date and hour already exists, excluding the current reservation being edited
            
            // Check if a reservation with the same date, hour, and activity already exists
            String checkQuery = "SELECT COUNT(*) FROM réservation WHERE date_act = ? AND ((heure_act <= ? AND heure_act + dur_act > ?) OR (heure_act >= ? AND heure_act < ?)) AND id_act = (SELECT id_act FROM activité WHERE Nom_act = ? AND id_res != ?)";
            PreparedStatement checkPst = Con.prepareStatement(checkQuery);
            checkPst.setString(1, date.getDate().toString());
            
            // Get the selected start time and duration
            LocalTime selectedTime = hour.getTime();
            int selectedDuration = Integer.parseInt(dur.getText());

            // Calculate the end time
            LocalTime endTime = selectedTime.plusHours(selectedDuration);

            // Format the start time and end time as strings
            String formattedStartTime = selectedTime.format(DateTimeFormatter.ofPattern("HH:mm", Locale.FRANCE));
            String formattedEndTime = endTime.format(DateTimeFormatter.ofPattern("HH:mm", Locale.FRANCE));

            checkPst.setString(2, formattedStartTime);
            checkPst.setString(3, formattedStartTime);
            checkPst.setString(4, formattedStartTime);
            checkPst.setString(5, formattedEndTime);
            checkPst.setString(6, nomact.getSelectedItem().toString());
            checkPst.setInt(7, Integer.parseInt(jTable1.getValueAt(index, 0).toString()));
            ResultSet checkResult = checkPst.executeQuery();

            if (checkResult.next() && checkResult.getInt(1) > 0) {
                JOptionPane.showMessageDialog(null, "Une réservation existe déjà à cette date, heure et pour cette activité. Veuillez choisir une autre heure ou activité.");
            } 
            else{
      
            String updateQuery = "UPDATE réservation SET Num_c=?, heure_act = ?, dur_act=? , date_act = ? , Nbr_participant = ?, Obj_res = ?, Mon_pai = ?, date_Pai = ?, Meth_Pai = ?, id_os = (SELECT id_os FROM organisateur WHERE Nom_os = ?),id_act = (SELECT id_act FROM activité WHERE Nom_act = ?) WHERE id_res = ? ";
        PreparedStatement pst = Con.prepareStatement(updateQuery);

        pst.setInt(1, Integer.parseInt(conv.getText()));

        String formattedTime = selectedTime.format(DateTimeFormatter.ofPattern("HH:mm",Locale.FRANCE));
        pst.setString(2, formattedTime);
        pst.setInt(3, Integer.parseInt(dur.getText()));
        pst.setString(4, date.getDate().toString());
        pst.setInt(5, Integer.parseInt(nbr.getText()));
        pst.setString(6, obj.getText());
        pst.setInt(7, Integer.parseInt(money.getText()));
        pst.setString(8, mondate.getDate().toString());
        pst.setString(9, methode.getSelectedItem().toString());
        pst.setString(10, nom_os.getSelectedItem().toString());
        pst.setString(11, nomact.getSelectedItem().toString());
        pst.setInt(12, Integer.parseInt(jTable1.getValueAt(index, 0).toString()));
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Réservation modifiée avec succès !");     
        ShowI();
  
        conv.setText("");
        hour.setText("");
        dur.setText("");
        date.setText("");
        nbr.setText("");
        obj.setText("");
        money.setText("");
        mondate.setText("");
        methode.setSelectedIndex(-1);
        nom_os.setSelectedIndex(-1);
        nomact.setSelectedIndex(-1);
         Con.close();
         
     
            } 
} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème d'affichage de la fenêtre.");
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Veuillez entrer des valeurs numériques valides.");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème avec la base de données.");
}

        
        
        
        
           }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jeditActionPerformed
     String Key = null;
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
      
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
       int rowIndex = jTable1.getSelectedRow();
 
       
       Key = model.getValueAt(rowIndex, 0).toString();
       conv.setText(model.getValueAt(rowIndex, 1).toString()); 
       hour.setText(model.getValueAt(rowIndex, 2).toString());
       dur.setText(model.getValueAt(rowIndex, 3).toString());
       date.setDate(LocalDate.parse(model.getValueAt(rowIndex, 4).toString()));
       obj.setText(model.getValueAt(rowIndex, 5).toString());
       nbr.setText(model.getValueAt(rowIndex, 6).toString());
       money.setText(model.getValueAt(rowIndex, 7).toString());
       mondate.setDate(LocalDate.parse(model.getValueAt(rowIndex, 8).toString()));
       
       String methodeValue = model.getValueAt(rowIndex, 9).toString();
       int methodeIndex = -1;
for (int i = 0; i <methode.getItemCount(); i++) {
    
    if (methodeValue.equals(methode.getItemAt(i).toString())) {
        methodeIndex = i;
        break;
    }
}
methode.setSelectedIndex(methodeIndex);
       String idOs = model.getValueAt(rowIndex, 10).toString(); 
       String idAct = model.getValueAt(rowIndex, 11).toString(); 
try {
        Connect_DB();
        
// Set the value of nom_org based on idOrg

        String nomOsQuery = "SELECT Nom_os FROM organisateur WHERE id_os = ?";
        try (PreparedStatement nomOsStmt = Con.prepareStatement(nomOsQuery)) {
            nomOsStmt.setString(1, idOs);
            ResultSet nomOsResult = nomOsStmt.executeQuery();
            if (nomOsResult.next()) {
                String nomOsValue = nomOsResult.getString("Nom_os");
                int nomOsIndex = getComboBoxItemIndex(nom_os, nomOsValue);
                nom_os.setSelectedIndex(nomOsIndex);
            }
        }
        
        // Set the value of nomact based on idAct
        String nomActQuery = "SELECT Nom_act FROM activité WHERE Id_act = ?";
        try (PreparedStatement nomActStmt = Con.prepareStatement(nomActQuery)) {
            nomActStmt.setString(1, idAct);
            ResultSet nomActResult = nomActStmt.executeQuery();
            if (nomActResult.next()) {
                String nomActValue = nomActResult.getString("Nom_act");
                int nomActIndex = getComboBoxItemIndex(nomact, nomActValue);
                nomact.setSelectedIndex(nomActIndex);
            }
        }
} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème d'affichage de la fenêtre.");
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Veuillez entrer des valeurs numériques valides.");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème avec la base de données.");
}


       
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdeleteActionPerformed

        int index = jTable1.getSelectedRow();
        if (index == -1) {
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner une réservation à supprimer.");
        return;
        }
            int dialogResult = JOptionPane.showConfirmDialog(null, "Êtes-vous sûr de vouloir supprimer cette réservation ?", "Attention", JOptionPane.YES_NO_OPTION);
    if (dialogResult == JOptionPane.YES_OPTION) {
        try {
            Connect_DB();
            String deleteQuery = "DELETE FROM réservation WHERE id_res = ?";
            PreparedStatement pst = Con.prepareStatement(deleteQuery);
            pst.setInt(1, Integer.parseInt(jTable1.getValueAt(index, 0).toString()));
                    pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Réservation supprimée avec succès !");
            ShowI();
                    conv.setText("");
        hour.setText("");
        dur.setText("");
        date.setText("");
        nbr.setText("");
        obj.setText("");
        money.setText("");
        mondate.setText("");
        methode.setSelectedIndex(-1);
        nom_os.setSelectedIndex(-1);
        nomact.setSelectedIndex(-1);
         Con.close();
  
         } catch (HeadlessException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème d'affichage de la fenêtre.");
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Veuillez entrer des valeurs numériques valides.");
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Erreur: Problème avec la base de données.");
}

        
        
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jdeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservation2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Print;
    private javax.swing.JButton back;
    private javax.swing.JTextField conv;
    private com.github.lgooddatepicker.components.DatePicker date;
    private javax.swing.JTextField dur;
    private com.github.lgooddatepicker.components.TimePicker hour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jadd;
    private javax.swing.JButton jdelete;
    private javax.swing.JButton jedit;
    private javax.swing.JComboBox<String> methode;
    private com.github.lgooddatepicker.components.DatePicker mondate;
    private javax.swing.JTextField money;
    private javax.swing.JTextField nbr;
    private javax.swing.JComboBox<String> nom_os;
    private javax.swing.JComboBox<String> nomact;
    private javax.swing.JTextField obj;
    // End of variables declaration//GEN-END:variables

 private int getComboBoxItemIndex(JComboBox comboBox, String value) {
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        if (comboBox.getItemAt(i).toString().equals(value)) {
            return i;
        }
    }
    return -1;
}

}


